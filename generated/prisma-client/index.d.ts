// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  ability: (where?: AbilityWhereInput) => Promise<boolean>;
  form: (where?: FormWhereInput) => Promise<boolean>;
  gameIndex: (where?: GameIndexWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  move: (where?: MoveWhereInput) => Promise<boolean>;
  pokemon: (where?: PokemonWhereInput) => Promise<boolean>;
  species: (where?: SpeciesWhereInput) => Promise<boolean>;
  sprite: (where?: SpriteWhereInput) => Promise<boolean>;
  stat: (where?: StatWhereInput) => Promise<boolean>;
  type: (where?: TypeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  abilities: (
    args?: {
      where?: AbilityWhereInput;
      orderBy?: AbilityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ability>;
  abilitiesConnection: (
    args?: {
      where?: AbilityWhereInput;
      orderBy?: AbilityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AbilityConnectionPromise;
  forms: (
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Form>;
  formsConnection: (
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FormConnectionPromise;
  gameIndexes: (
    args?: {
      where?: GameIndexWhereInput;
      orderBy?: GameIndexOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GameIndex>;
  gameIndexesConnection: (
    args?: {
      where?: GameIndexWhereInput;
      orderBy?: GameIndexOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GameIndexConnectionPromise;
  items: (
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Item>;
  itemsConnection: (
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ItemConnectionPromise;
  moves: (
    args?: {
      where?: MoveWhereInput;
      orderBy?: MoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Move>;
  movesConnection: (
    args?: {
      where?: MoveWhereInput;
      orderBy?: MoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MoveConnectionPromise;
  pokemon: (where: PokemonWhereUniqueInput) => PokemonPromise;
  pokemons: (
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Pokemon>;
  pokemonsConnection: (
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PokemonConnectionPromise;
  specieses: (
    args?: {
      where?: SpeciesWhereInput;
      orderBy?: SpeciesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Species>;
  speciesesConnection: (
    args?: {
      where?: SpeciesWhereInput;
      orderBy?: SpeciesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SpeciesConnectionPromise;
  sprites: (
    args?: {
      where?: SpriteWhereInput;
      orderBy?: SpriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Sprite>;
  spritesConnection: (
    args?: {
      where?: SpriteWhereInput;
      orderBy?: SpriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SpriteConnectionPromise;
  stats: (
    args?: {
      where?: StatWhereInput;
      orderBy?: StatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Stat>;
  statsConnection: (
    args?: {
      where?: StatWhereInput;
      orderBy?: StatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StatConnectionPromise;
  types: (
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Type>;
  typesConnection: (
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TypeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAbility: (data: AbilityCreateInput) => AbilityPromise;
  updateManyAbilities: (
    args: { data: AbilityUpdateManyMutationInput; where?: AbilityWhereInput }
  ) => BatchPayloadPromise;
  deleteManyAbilities: (where?: AbilityWhereInput) => BatchPayloadPromise;
  createForm: (data: FormCreateInput) => FormPromise;
  updateManyForms: (
    args: { data: FormUpdateManyMutationInput; where?: FormWhereInput }
  ) => BatchPayloadPromise;
  deleteManyForms: (where?: FormWhereInput) => BatchPayloadPromise;
  createGameIndex: (data: GameIndexCreateInput) => GameIndexPromise;
  updateManyGameIndexes: (
    args: {
      data: GameIndexUpdateManyMutationInput;
      where?: GameIndexWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyGameIndexes: (where?: GameIndexWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateManyItems: (
    args: { data: ItemUpdateManyMutationInput; where?: ItemWhereInput }
  ) => BatchPayloadPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createMove: (data: MoveCreateInput) => MovePromise;
  updateManyMoves: (
    args: { data: MoveUpdateManyMutationInput; where?: MoveWhereInput }
  ) => BatchPayloadPromise;
  deleteManyMoves: (where?: MoveWhereInput) => BatchPayloadPromise;
  createPokemon: (data: PokemonCreateInput) => PokemonPromise;
  updatePokemon: (
    args: { data: PokemonUpdateInput; where: PokemonWhereUniqueInput }
  ) => PokemonPromise;
  updateManyPokemons: (
    args: { data: PokemonUpdateManyMutationInput; where?: PokemonWhereInput }
  ) => BatchPayloadPromise;
  upsertPokemon: (
    args: {
      where: PokemonWhereUniqueInput;
      create: PokemonCreateInput;
      update: PokemonUpdateInput;
    }
  ) => PokemonPromise;
  deletePokemon: (where: PokemonWhereUniqueInput) => PokemonPromise;
  deleteManyPokemons: (where?: PokemonWhereInput) => BatchPayloadPromise;
  createSpecies: (data: SpeciesCreateInput) => SpeciesPromise;
  updateManySpecieses: (
    args: { data: SpeciesUpdateManyMutationInput; where?: SpeciesWhereInput }
  ) => BatchPayloadPromise;
  deleteManySpecieses: (where?: SpeciesWhereInput) => BatchPayloadPromise;
  createSprite: (data: SpriteCreateInput) => SpritePromise;
  updateManySprites: (
    args: { data: SpriteUpdateManyMutationInput; where?: SpriteWhereInput }
  ) => BatchPayloadPromise;
  deleteManySprites: (where?: SpriteWhereInput) => BatchPayloadPromise;
  createStat: (data: StatCreateInput) => StatPromise;
  updateManyStats: (
    args: { data: StatUpdateManyMutationInput; where?: StatWhereInput }
  ) => BatchPayloadPromise;
  deleteManyStats: (where?: StatWhereInput) => BatchPayloadPromise;
  createType: (data: TypeCreateInput) => TypePromise;
  updateManyTypes: (
    args: { data: TypeUpdateManyMutationInput; where?: TypeWhereInput }
  ) => BatchPayloadPromise;
  deleteManyTypes: (where?: TypeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  ability: (
    where?: AbilitySubscriptionWhereInput
  ) => AbilitySubscriptionPayloadSubscription;
  form: (
    where?: FormSubscriptionWhereInput
  ) => FormSubscriptionPayloadSubscription;
  gameIndex: (
    where?: GameIndexSubscriptionWhereInput
  ) => GameIndexSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  move: (
    where?: MoveSubscriptionWhereInput
  ) => MoveSubscriptionPayloadSubscription;
  pokemon: (
    where?: PokemonSubscriptionWhereInput
  ) => PokemonSubscriptionPayloadSubscription;
  species: (
    where?: SpeciesSubscriptionWhereInput
  ) => SpeciesSubscriptionPayloadSubscription;
  sprite: (
    where?: SpriteSubscriptionWhereInput
  ) => SpriteSubscriptionPayloadSubscription;
  stat: (
    where?: StatSubscriptionWhereInput
  ) => StatSubscriptionPayloadSubscription;
  type: (
    where?: TypeSubscriptionWhereInput
  ) => TypeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AbilityOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FormOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GameIndexOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ItemOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MoveOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SpeciesOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SpriteOrderByInput =
  | "back_default_ASC"
  | "back_default_DESC"
  | "back_female_ASC"
  | "back_female_DESC"
  | "back_shiny_ASC"
  | "back_shiny_DESC"
  | "back_shiny_female_ASC"
  | "back_shiny_female_DESC"
  | "front_default_ASC"
  | "front_default_DESC"
  | "front_female_ASC"
  | "front_female_DESC"
  | "front_shiny_ASC"
  | "front_shiny_DESC"
  | "front_shiny_female_ASC"
  | "front_shiny_female_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StatOrderByInput =
  | "base_stat_ASC"
  | "base_stat_DESC"
  | "effort_ASC"
  | "effort_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TypeOrderByInput =
  | "slot_ASC"
  | "slot_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PokemonOrderByInput =
  | "base_experience_ASC"
  | "base_experience_DESC"
  | "height_ASC"
  | "height_DESC"
  | "id_ASC"
  | "id_DESC"
  | "is_default_ASC"
  | "is_default_DESC"
  | "location_area_encounters_ASC"
  | "location_area_encounters_DESC"
  | "name_ASC"
  | "name_DESC"
  | "order_ASC"
  | "order_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AbilityWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: AbilityWhereInput[] | AbilityWhereInput;
  OR?: AbilityWhereInput[] | AbilityWhereInput;
  NOT?: AbilityWhereInput[] | AbilityWhereInput;
}

export interface FormWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: FormWhereInput[] | FormWhereInput;
  OR?: FormWhereInput[] | FormWhereInput;
  NOT?: FormWhereInput[] | FormWhereInput;
}

export interface GameIndexWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: GameIndexWhereInput[] | GameIndexWhereInput;
  OR?: GameIndexWhereInput[] | GameIndexWhereInput;
  NOT?: GameIndexWhereInput[] | GameIndexWhereInput;
}

export interface ItemWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: ItemWhereInput[] | ItemWhereInput;
  OR?: ItemWhereInput[] | ItemWhereInput;
  NOT?: ItemWhereInput[] | ItemWhereInput;
}

export interface MoveWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: MoveWhereInput[] | MoveWhereInput;
  OR?: MoveWhereInput[] | MoveWhereInput;
  NOT?: MoveWhereInput[] | MoveWhereInput;
}

export type PokemonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SpeciesWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: SpeciesWhereInput[] | SpeciesWhereInput;
  OR?: SpeciesWhereInput[] | SpeciesWhereInput;
  NOT?: SpeciesWhereInput[] | SpeciesWhereInput;
}

export interface SpriteWhereInput {
  back_default?: String;
  back_default_not?: String;
  back_default_in?: String[] | String;
  back_default_not_in?: String[] | String;
  back_default_lt?: String;
  back_default_lte?: String;
  back_default_gt?: String;
  back_default_gte?: String;
  back_default_contains?: String;
  back_default_not_contains?: String;
  back_default_starts_with?: String;
  back_default_not_starts_with?: String;
  back_default_ends_with?: String;
  back_default_not_ends_with?: String;
  back_female?: String;
  back_female_not?: String;
  back_female_in?: String[] | String;
  back_female_not_in?: String[] | String;
  back_female_lt?: String;
  back_female_lte?: String;
  back_female_gt?: String;
  back_female_gte?: String;
  back_female_contains?: String;
  back_female_not_contains?: String;
  back_female_starts_with?: String;
  back_female_not_starts_with?: String;
  back_female_ends_with?: String;
  back_female_not_ends_with?: String;
  back_shiny?: String;
  back_shiny_not?: String;
  back_shiny_in?: String[] | String;
  back_shiny_not_in?: String[] | String;
  back_shiny_lt?: String;
  back_shiny_lte?: String;
  back_shiny_gt?: String;
  back_shiny_gte?: String;
  back_shiny_contains?: String;
  back_shiny_not_contains?: String;
  back_shiny_starts_with?: String;
  back_shiny_not_starts_with?: String;
  back_shiny_ends_with?: String;
  back_shiny_not_ends_with?: String;
  back_shiny_female?: String;
  back_shiny_female_not?: String;
  back_shiny_female_in?: String[] | String;
  back_shiny_female_not_in?: String[] | String;
  back_shiny_female_lt?: String;
  back_shiny_female_lte?: String;
  back_shiny_female_gt?: String;
  back_shiny_female_gte?: String;
  back_shiny_female_contains?: String;
  back_shiny_female_not_contains?: String;
  back_shiny_female_starts_with?: String;
  back_shiny_female_not_starts_with?: String;
  back_shiny_female_ends_with?: String;
  back_shiny_female_not_ends_with?: String;
  front_default?: String;
  front_default_not?: String;
  front_default_in?: String[] | String;
  front_default_not_in?: String[] | String;
  front_default_lt?: String;
  front_default_lte?: String;
  front_default_gt?: String;
  front_default_gte?: String;
  front_default_contains?: String;
  front_default_not_contains?: String;
  front_default_starts_with?: String;
  front_default_not_starts_with?: String;
  front_default_ends_with?: String;
  front_default_not_ends_with?: String;
  front_female?: String;
  front_female_not?: String;
  front_female_in?: String[] | String;
  front_female_not_in?: String[] | String;
  front_female_lt?: String;
  front_female_lte?: String;
  front_female_gt?: String;
  front_female_gte?: String;
  front_female_contains?: String;
  front_female_not_contains?: String;
  front_female_starts_with?: String;
  front_female_not_starts_with?: String;
  front_female_ends_with?: String;
  front_female_not_ends_with?: String;
  front_shiny?: String;
  front_shiny_not?: String;
  front_shiny_in?: String[] | String;
  front_shiny_not_in?: String[] | String;
  front_shiny_lt?: String;
  front_shiny_lte?: String;
  front_shiny_gt?: String;
  front_shiny_gte?: String;
  front_shiny_contains?: String;
  front_shiny_not_contains?: String;
  front_shiny_starts_with?: String;
  front_shiny_not_starts_with?: String;
  front_shiny_ends_with?: String;
  front_shiny_not_ends_with?: String;
  front_shiny_female?: String;
  front_shiny_female_not?: String;
  front_shiny_female_in?: String[] | String;
  front_shiny_female_not_in?: String[] | String;
  front_shiny_female_lt?: String;
  front_shiny_female_lte?: String;
  front_shiny_female_gt?: String;
  front_shiny_female_gte?: String;
  front_shiny_female_contains?: String;
  front_shiny_female_not_contains?: String;
  front_shiny_female_starts_with?: String;
  front_shiny_female_not_starts_with?: String;
  front_shiny_female_ends_with?: String;
  front_shiny_female_not_ends_with?: String;
  AND?: SpriteWhereInput[] | SpriteWhereInput;
  OR?: SpriteWhereInput[] | SpriteWhereInput;
  NOT?: SpriteWhereInput[] | SpriteWhereInput;
}

export interface StatWhereInput {
  base_stat?: Int;
  base_stat_not?: Int;
  base_stat_in?: Int[] | Int;
  base_stat_not_in?: Int[] | Int;
  base_stat_lt?: Int;
  base_stat_lte?: Int;
  base_stat_gt?: Int;
  base_stat_gte?: Int;
  effort?: Int;
  effort_not?: Int;
  effort_in?: Int[] | Int;
  effort_not_in?: Int[] | Int;
  effort_lt?: Int;
  effort_lte?: Int;
  effort_gt?: Int;
  effort_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: StatWhereInput[] | StatWhereInput;
  OR?: StatWhereInput[] | StatWhereInput;
  NOT?: StatWhereInput[] | StatWhereInput;
}

export interface TypeWhereInput {
  slot?: Int;
  slot_not?: Int;
  slot_in?: Int[] | Int;
  slot_not_in?: Int[] | Int;
  slot_lt?: Int;
  slot_lte?: Int;
  slot_gt?: Int;
  slot_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: TypeWhereInput[] | TypeWhereInput;
  OR?: TypeWhereInput[] | TypeWhereInput;
  NOT?: TypeWhereInput[] | TypeWhereInput;
}

export interface PokemonWhereInput {
  abilities_every?: AbilityWhereInput;
  abilities_some?: AbilityWhereInput;
  abilities_none?: AbilityWhereInput;
  base_experience?: Int;
  base_experience_not?: Int;
  base_experience_in?: Int[] | Int;
  base_experience_not_in?: Int[] | Int;
  base_experience_lt?: Int;
  base_experience_lte?: Int;
  base_experience_gt?: Int;
  base_experience_gte?: Int;
  forms_every?: FormWhereInput;
  forms_some?: FormWhereInput;
  forms_none?: FormWhereInput;
  game_indices_every?: GameIndexWhereInput;
  game_indices_some?: GameIndexWhereInput;
  game_indices_none?: GameIndexWhereInput;
  held_items_every?: ItemWhereInput;
  held_items_some?: ItemWhereInput;
  held_items_none?: ItemWhereInput;
  height?: Int;
  height_not?: Int;
  height_in?: Int[] | Int;
  height_not_in?: Int[] | Int;
  height_lt?: Int;
  height_lte?: Int;
  height_gt?: Int;
  height_gte?: Int;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  is_default?: Boolean;
  is_default_not?: Boolean;
  location_area_encounters?: String;
  location_area_encounters_not?: String;
  location_area_encounters_in?: String[] | String;
  location_area_encounters_not_in?: String[] | String;
  location_area_encounters_lt?: String;
  location_area_encounters_lte?: String;
  location_area_encounters_gt?: String;
  location_area_encounters_gte?: String;
  location_area_encounters_contains?: String;
  location_area_encounters_not_contains?: String;
  location_area_encounters_starts_with?: String;
  location_area_encounters_not_starts_with?: String;
  location_area_encounters_ends_with?: String;
  location_area_encounters_not_ends_with?: String;
  moves_every?: MoveWhereInput;
  moves_some?: MoveWhereInput;
  moves_none?: MoveWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  species_every?: SpeciesWhereInput;
  species_some?: SpeciesWhereInput;
  species_none?: SpeciesWhereInput;
  sprites_every?: SpriteWhereInput;
  sprites_some?: SpriteWhereInput;
  sprites_none?: SpriteWhereInput;
  stats_every?: StatWhereInput;
  stats_some?: StatWhereInput;
  stats_none?: StatWhereInput;
  types_every?: TypeWhereInput;
  types_some?: TypeWhereInput;
  types_none?: TypeWhereInput;
  weight?: Int;
  weight_not?: Int;
  weight_in?: Int[] | Int;
  weight_not_in?: Int[] | Int;
  weight_lt?: Int;
  weight_lte?: Int;
  weight_gt?: Int;
  weight_gte?: Int;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: PokemonWhereInput[] | PokemonWhereInput;
  OR?: PokemonWhereInput[] | PokemonWhereInput;
  NOT?: PokemonWhereInput[] | PokemonWhereInput;
}

export interface AbilityCreateInput {
  name?: String;
  url?: String;
}

export interface AbilityUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface FormCreateInput {
  name?: String;
  url?: String;
}

export interface FormUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface GameIndexCreateInput {
  name?: String;
  url?: String;
}

export interface GameIndexUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface ItemCreateInput {
  name?: String;
  url?: String;
}

export interface ItemUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface MoveCreateInput {
  name?: String;
  url?: String;
}

export interface MoveUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface PokemonCreateInput {
  abilities?: AbilityCreateManyInput;
  base_experience?: Int;
  forms?: FormCreateManyInput;
  game_indices?: GameIndexCreateManyInput;
  held_items?: ItemCreateManyInput;
  height?: Int;
  is_default?: Boolean;
  location_area_encounters?: String;
  moves?: MoveCreateManyInput;
  name?: String;
  order?: Int;
  species?: SpeciesCreateManyInput;
  sprites?: SpriteCreateManyInput;
  stats?: StatCreateManyInput;
  types?: TypeCreateManyInput;
  weight?: Int;
  url?: String;
}

export interface AbilityCreateManyInput {
  create?: AbilityCreateInput[] | AbilityCreateInput;
}

export interface FormCreateManyInput {
  create?: FormCreateInput[] | FormCreateInput;
}

export interface GameIndexCreateManyInput {
  create?: GameIndexCreateInput[] | GameIndexCreateInput;
}

export interface ItemCreateManyInput {
  create?: ItemCreateInput[] | ItemCreateInput;
}

export interface MoveCreateManyInput {
  create?: MoveCreateInput[] | MoveCreateInput;
}

export interface SpeciesCreateManyInput {
  create?: SpeciesCreateInput[] | SpeciesCreateInput;
}

export interface SpeciesCreateInput {
  name?: String;
  url?: String;
}

export interface SpriteCreateManyInput {
  create?: SpriteCreateInput[] | SpriteCreateInput;
}

export interface SpriteCreateInput {
  back_default?: String;
  back_female?: String;
  back_shiny?: String;
  back_shiny_female?: String;
  front_default?: String;
  front_female?: String;
  front_shiny?: String;
  front_shiny_female?: String;
}

export interface StatCreateManyInput {
  create?: StatCreateInput[] | StatCreateInput;
}

export interface StatCreateInput {
  base_stat?: Int;
  effort?: Int;
  name?: String;
  url?: String;
}

export interface TypeCreateManyInput {
  create?: TypeCreateInput[] | TypeCreateInput;
}

export interface TypeCreateInput {
  slot?: Int;
  name?: String;
  url?: String;
}

export interface PokemonUpdateInput {
  abilities?: AbilityUpdateManyInput;
  base_experience?: Int;
  forms?: FormUpdateManyInput;
  game_indices?: GameIndexUpdateManyInput;
  held_items?: ItemUpdateManyInput;
  height?: Int;
  is_default?: Boolean;
  location_area_encounters?: String;
  moves?: MoveUpdateManyInput;
  name?: String;
  order?: Int;
  species?: SpeciesUpdateManyInput;
  sprites?: SpriteUpdateManyInput;
  stats?: StatUpdateManyInput;
  types?: TypeUpdateManyInput;
  weight?: Int;
  url?: String;
}

export interface AbilityUpdateManyInput {
  create?: AbilityCreateInput[] | AbilityCreateInput;
  deleteMany?: AbilityScalarWhereInput[] | AbilityScalarWhereInput;
  updateMany?:
    | AbilityUpdateManyWithWhereNestedInput[]
    | AbilityUpdateManyWithWhereNestedInput;
}

export interface AbilityScalarWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: AbilityScalarWhereInput[] | AbilityScalarWhereInput;
  OR?: AbilityScalarWhereInput[] | AbilityScalarWhereInput;
  NOT?: AbilityScalarWhereInput[] | AbilityScalarWhereInput;
}

export interface AbilityUpdateManyWithWhereNestedInput {
  where: AbilityScalarWhereInput;
  data: AbilityUpdateManyDataInput;
}

export interface AbilityUpdateManyDataInput {
  name?: String;
  url?: String;
}

export interface FormUpdateManyInput {
  create?: FormCreateInput[] | FormCreateInput;
  deleteMany?: FormScalarWhereInput[] | FormScalarWhereInput;
  updateMany?:
    | FormUpdateManyWithWhereNestedInput[]
    | FormUpdateManyWithWhereNestedInput;
}

export interface FormScalarWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: FormScalarWhereInput[] | FormScalarWhereInput;
  OR?: FormScalarWhereInput[] | FormScalarWhereInput;
  NOT?: FormScalarWhereInput[] | FormScalarWhereInput;
}

export interface FormUpdateManyWithWhereNestedInput {
  where: FormScalarWhereInput;
  data: FormUpdateManyDataInput;
}

export interface FormUpdateManyDataInput {
  name?: String;
  url?: String;
}

export interface GameIndexUpdateManyInput {
  create?: GameIndexCreateInput[] | GameIndexCreateInput;
  deleteMany?: GameIndexScalarWhereInput[] | GameIndexScalarWhereInput;
  updateMany?:
    | GameIndexUpdateManyWithWhereNestedInput[]
    | GameIndexUpdateManyWithWhereNestedInput;
}

export interface GameIndexScalarWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: GameIndexScalarWhereInput[] | GameIndexScalarWhereInput;
  OR?: GameIndexScalarWhereInput[] | GameIndexScalarWhereInput;
  NOT?: GameIndexScalarWhereInput[] | GameIndexScalarWhereInput;
}

export interface GameIndexUpdateManyWithWhereNestedInput {
  where: GameIndexScalarWhereInput;
  data: GameIndexUpdateManyDataInput;
}

export interface GameIndexUpdateManyDataInput {
  name?: String;
  url?: String;
}

export interface ItemUpdateManyInput {
  create?: ItemCreateInput[] | ItemCreateInput;
  deleteMany?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  updateMany?:
    | ItemUpdateManyWithWhereNestedInput[]
    | ItemUpdateManyWithWhereNestedInput;
}

export interface ItemScalarWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  OR?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  NOT?: ItemScalarWhereInput[] | ItemScalarWhereInput;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface ItemUpdateManyDataInput {
  name?: String;
  url?: String;
}

export interface MoveUpdateManyInput {
  create?: MoveCreateInput[] | MoveCreateInput;
  deleteMany?: MoveScalarWhereInput[] | MoveScalarWhereInput;
  updateMany?:
    | MoveUpdateManyWithWhereNestedInput[]
    | MoveUpdateManyWithWhereNestedInput;
}

export interface MoveScalarWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: MoveScalarWhereInput[] | MoveScalarWhereInput;
  OR?: MoveScalarWhereInput[] | MoveScalarWhereInput;
  NOT?: MoveScalarWhereInput[] | MoveScalarWhereInput;
}

export interface MoveUpdateManyWithWhereNestedInput {
  where: MoveScalarWhereInput;
  data: MoveUpdateManyDataInput;
}

export interface MoveUpdateManyDataInput {
  name?: String;
  url?: String;
}

export interface SpeciesUpdateManyInput {
  create?: SpeciesCreateInput[] | SpeciesCreateInput;
  deleteMany?: SpeciesScalarWhereInput[] | SpeciesScalarWhereInput;
  updateMany?:
    | SpeciesUpdateManyWithWhereNestedInput[]
    | SpeciesUpdateManyWithWhereNestedInput;
}

export interface SpeciesScalarWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: SpeciesScalarWhereInput[] | SpeciesScalarWhereInput;
  OR?: SpeciesScalarWhereInput[] | SpeciesScalarWhereInput;
  NOT?: SpeciesScalarWhereInput[] | SpeciesScalarWhereInput;
}

export interface SpeciesUpdateManyWithWhereNestedInput {
  where: SpeciesScalarWhereInput;
  data: SpeciesUpdateManyDataInput;
}

export interface SpeciesUpdateManyDataInput {
  name?: String;
  url?: String;
}

export interface SpriteUpdateManyInput {
  create?: SpriteCreateInput[] | SpriteCreateInput;
  deleteMany?: SpriteScalarWhereInput[] | SpriteScalarWhereInput;
  updateMany?:
    | SpriteUpdateManyWithWhereNestedInput[]
    | SpriteUpdateManyWithWhereNestedInput;
}

export interface SpriteScalarWhereInput {
  back_default?: String;
  back_default_not?: String;
  back_default_in?: String[] | String;
  back_default_not_in?: String[] | String;
  back_default_lt?: String;
  back_default_lte?: String;
  back_default_gt?: String;
  back_default_gte?: String;
  back_default_contains?: String;
  back_default_not_contains?: String;
  back_default_starts_with?: String;
  back_default_not_starts_with?: String;
  back_default_ends_with?: String;
  back_default_not_ends_with?: String;
  back_female?: String;
  back_female_not?: String;
  back_female_in?: String[] | String;
  back_female_not_in?: String[] | String;
  back_female_lt?: String;
  back_female_lte?: String;
  back_female_gt?: String;
  back_female_gte?: String;
  back_female_contains?: String;
  back_female_not_contains?: String;
  back_female_starts_with?: String;
  back_female_not_starts_with?: String;
  back_female_ends_with?: String;
  back_female_not_ends_with?: String;
  back_shiny?: String;
  back_shiny_not?: String;
  back_shiny_in?: String[] | String;
  back_shiny_not_in?: String[] | String;
  back_shiny_lt?: String;
  back_shiny_lte?: String;
  back_shiny_gt?: String;
  back_shiny_gte?: String;
  back_shiny_contains?: String;
  back_shiny_not_contains?: String;
  back_shiny_starts_with?: String;
  back_shiny_not_starts_with?: String;
  back_shiny_ends_with?: String;
  back_shiny_not_ends_with?: String;
  back_shiny_female?: String;
  back_shiny_female_not?: String;
  back_shiny_female_in?: String[] | String;
  back_shiny_female_not_in?: String[] | String;
  back_shiny_female_lt?: String;
  back_shiny_female_lte?: String;
  back_shiny_female_gt?: String;
  back_shiny_female_gte?: String;
  back_shiny_female_contains?: String;
  back_shiny_female_not_contains?: String;
  back_shiny_female_starts_with?: String;
  back_shiny_female_not_starts_with?: String;
  back_shiny_female_ends_with?: String;
  back_shiny_female_not_ends_with?: String;
  front_default?: String;
  front_default_not?: String;
  front_default_in?: String[] | String;
  front_default_not_in?: String[] | String;
  front_default_lt?: String;
  front_default_lte?: String;
  front_default_gt?: String;
  front_default_gte?: String;
  front_default_contains?: String;
  front_default_not_contains?: String;
  front_default_starts_with?: String;
  front_default_not_starts_with?: String;
  front_default_ends_with?: String;
  front_default_not_ends_with?: String;
  front_female?: String;
  front_female_not?: String;
  front_female_in?: String[] | String;
  front_female_not_in?: String[] | String;
  front_female_lt?: String;
  front_female_lte?: String;
  front_female_gt?: String;
  front_female_gte?: String;
  front_female_contains?: String;
  front_female_not_contains?: String;
  front_female_starts_with?: String;
  front_female_not_starts_with?: String;
  front_female_ends_with?: String;
  front_female_not_ends_with?: String;
  front_shiny?: String;
  front_shiny_not?: String;
  front_shiny_in?: String[] | String;
  front_shiny_not_in?: String[] | String;
  front_shiny_lt?: String;
  front_shiny_lte?: String;
  front_shiny_gt?: String;
  front_shiny_gte?: String;
  front_shiny_contains?: String;
  front_shiny_not_contains?: String;
  front_shiny_starts_with?: String;
  front_shiny_not_starts_with?: String;
  front_shiny_ends_with?: String;
  front_shiny_not_ends_with?: String;
  front_shiny_female?: String;
  front_shiny_female_not?: String;
  front_shiny_female_in?: String[] | String;
  front_shiny_female_not_in?: String[] | String;
  front_shiny_female_lt?: String;
  front_shiny_female_lte?: String;
  front_shiny_female_gt?: String;
  front_shiny_female_gte?: String;
  front_shiny_female_contains?: String;
  front_shiny_female_not_contains?: String;
  front_shiny_female_starts_with?: String;
  front_shiny_female_not_starts_with?: String;
  front_shiny_female_ends_with?: String;
  front_shiny_female_not_ends_with?: String;
  AND?: SpriteScalarWhereInput[] | SpriteScalarWhereInput;
  OR?: SpriteScalarWhereInput[] | SpriteScalarWhereInput;
  NOT?: SpriteScalarWhereInput[] | SpriteScalarWhereInput;
}

export interface SpriteUpdateManyWithWhereNestedInput {
  where: SpriteScalarWhereInput;
  data: SpriteUpdateManyDataInput;
}

export interface SpriteUpdateManyDataInput {
  back_default?: String;
  back_female?: String;
  back_shiny?: String;
  back_shiny_female?: String;
  front_default?: String;
  front_female?: String;
  front_shiny?: String;
  front_shiny_female?: String;
}

export interface StatUpdateManyInput {
  create?: StatCreateInput[] | StatCreateInput;
  deleteMany?: StatScalarWhereInput[] | StatScalarWhereInput;
  updateMany?:
    | StatUpdateManyWithWhereNestedInput[]
    | StatUpdateManyWithWhereNestedInput;
}

export interface StatScalarWhereInput {
  base_stat?: Int;
  base_stat_not?: Int;
  base_stat_in?: Int[] | Int;
  base_stat_not_in?: Int[] | Int;
  base_stat_lt?: Int;
  base_stat_lte?: Int;
  base_stat_gt?: Int;
  base_stat_gte?: Int;
  effort?: Int;
  effort_not?: Int;
  effort_in?: Int[] | Int;
  effort_not_in?: Int[] | Int;
  effort_lt?: Int;
  effort_lte?: Int;
  effort_gt?: Int;
  effort_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: StatScalarWhereInput[] | StatScalarWhereInput;
  OR?: StatScalarWhereInput[] | StatScalarWhereInput;
  NOT?: StatScalarWhereInput[] | StatScalarWhereInput;
}

export interface StatUpdateManyWithWhereNestedInput {
  where: StatScalarWhereInput;
  data: StatUpdateManyDataInput;
}

export interface StatUpdateManyDataInput {
  base_stat?: Int;
  effort?: Int;
  name?: String;
  url?: String;
}

export interface TypeUpdateManyInput {
  create?: TypeCreateInput[] | TypeCreateInput;
  deleteMany?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  updateMany?:
    | TypeUpdateManyWithWhereNestedInput[]
    | TypeUpdateManyWithWhereNestedInput;
}

export interface TypeScalarWhereInput {
  slot?: Int;
  slot_not?: Int;
  slot_in?: Int[] | Int;
  slot_not_in?: Int[] | Int;
  slot_lt?: Int;
  slot_lte?: Int;
  slot_gt?: Int;
  slot_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  OR?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  NOT?: TypeScalarWhereInput[] | TypeScalarWhereInput;
}

export interface TypeUpdateManyWithWhereNestedInput {
  where: TypeScalarWhereInput;
  data: TypeUpdateManyDataInput;
}

export interface TypeUpdateManyDataInput {
  slot?: Int;
  name?: String;
  url?: String;
}

export interface PokemonUpdateManyMutationInput {
  base_experience?: Int;
  height?: Int;
  is_default?: Boolean;
  location_area_encounters?: String;
  name?: String;
  order?: Int;
  weight?: Int;
  url?: String;
}

export interface SpeciesUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface SpriteUpdateManyMutationInput {
  back_default?: String;
  back_female?: String;
  back_shiny?: String;
  back_shiny_female?: String;
  front_default?: String;
  front_female?: String;
  front_shiny?: String;
  front_shiny_female?: String;
}

export interface StatUpdateManyMutationInput {
  base_stat?: Int;
  effort?: Int;
  name?: String;
  url?: String;
}

export interface TypeUpdateManyMutationInput {
  slot?: Int;
  name?: String;
  url?: String;
}

export interface AbilitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AbilityWhereInput;
  AND?: AbilitySubscriptionWhereInput[] | AbilitySubscriptionWhereInput;
  OR?: AbilitySubscriptionWhereInput[] | AbilitySubscriptionWhereInput;
  NOT?: AbilitySubscriptionWhereInput[] | AbilitySubscriptionWhereInput;
}

export interface FormSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FormWhereInput;
  AND?: FormSubscriptionWhereInput[] | FormSubscriptionWhereInput;
  OR?: FormSubscriptionWhereInput[] | FormSubscriptionWhereInput;
  NOT?: FormSubscriptionWhereInput[] | FormSubscriptionWhereInput;
}

export interface GameIndexSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GameIndexWhereInput;
  AND?: GameIndexSubscriptionWhereInput[] | GameIndexSubscriptionWhereInput;
  OR?: GameIndexSubscriptionWhereInput[] | GameIndexSubscriptionWhereInput;
  NOT?: GameIndexSubscriptionWhereInput[] | GameIndexSubscriptionWhereInput;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ItemWhereInput;
  AND?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  OR?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  NOT?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
}

export interface MoveSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MoveWhereInput;
  AND?: MoveSubscriptionWhereInput[] | MoveSubscriptionWhereInput;
  OR?: MoveSubscriptionWhereInput[] | MoveSubscriptionWhereInput;
  NOT?: MoveSubscriptionWhereInput[] | MoveSubscriptionWhereInput;
}

export interface PokemonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PokemonWhereInput;
  AND?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
  OR?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
  NOT?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
}

export interface SpeciesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SpeciesWhereInput;
  AND?: SpeciesSubscriptionWhereInput[] | SpeciesSubscriptionWhereInput;
  OR?: SpeciesSubscriptionWhereInput[] | SpeciesSubscriptionWhereInput;
  NOT?: SpeciesSubscriptionWhereInput[] | SpeciesSubscriptionWhereInput;
}

export interface SpriteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SpriteWhereInput;
  AND?: SpriteSubscriptionWhereInput[] | SpriteSubscriptionWhereInput;
  OR?: SpriteSubscriptionWhereInput[] | SpriteSubscriptionWhereInput;
  NOT?: SpriteSubscriptionWhereInput[] | SpriteSubscriptionWhereInput;
}

export interface StatSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StatWhereInput;
  AND?: StatSubscriptionWhereInput[] | StatSubscriptionWhereInput;
  OR?: StatSubscriptionWhereInput[] | StatSubscriptionWhereInput;
  NOT?: StatSubscriptionWhereInput[] | StatSubscriptionWhereInput;
}

export interface TypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TypeWhereInput;
  AND?: TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput;
  OR?: TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput;
  NOT?: TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Ability {
  name?: String;
  url?: String;
}

export interface AbilityPromise extends Promise<Ability>, Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface AbilitySubscription
  extends Promise<AsyncIterator<Ability>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AbilityConnection {
  pageInfo: PageInfo;
  edges: AbilityEdge[];
}

export interface AbilityConnectionPromise
  extends Promise<AbilityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AbilityEdge>>() => T;
  aggregate: <T = AggregateAbilityPromise>() => T;
}

export interface AbilityConnectionSubscription
  extends Promise<AsyncIterator<AbilityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AbilityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAbilitySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AbilityEdge {
  node: Ability;
  cursor: String;
}

export interface AbilityEdgePromise extends Promise<AbilityEdge>, Fragmentable {
  node: <T = AbilityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AbilityEdgeSubscription
  extends Promise<AsyncIterator<AbilityEdge>>,
    Fragmentable {
  node: <T = AbilitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAbility {
  count: Int;
}

export interface AggregateAbilityPromise
  extends Promise<AggregateAbility>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAbilitySubscription
  extends Promise<AsyncIterator<AggregateAbility>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Form {
  name?: String;
  url?: String;
}

export interface FormPromise extends Promise<Form>, Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FormSubscription
  extends Promise<AsyncIterator<Form>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface FormConnection {
  pageInfo: PageInfo;
  edges: FormEdge[];
}

export interface FormConnectionPromise
  extends Promise<FormConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FormEdge>>() => T;
  aggregate: <T = AggregateFormPromise>() => T;
}

export interface FormConnectionSubscription
  extends Promise<AsyncIterator<FormConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FormEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFormSubscription>() => T;
}

export interface FormEdge {
  node: Form;
  cursor: String;
}

export interface FormEdgePromise extends Promise<FormEdge>, Fragmentable {
  node: <T = FormPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FormEdgeSubscription
  extends Promise<AsyncIterator<FormEdge>>,
    Fragmentable {
  node: <T = FormSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForm {
  count: Int;
}

export interface AggregateFormPromise
  extends Promise<AggregateForm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFormSubscription
  extends Promise<AsyncIterator<AggregateForm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GameIndex {
  name?: String;
  url?: String;
}

export interface GameIndexPromise extends Promise<GameIndex>, Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface GameIndexSubscription
  extends Promise<AsyncIterator<GameIndex>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface GameIndexConnection {
  pageInfo: PageInfo;
  edges: GameIndexEdge[];
}

export interface GameIndexConnectionPromise
  extends Promise<GameIndexConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameIndexEdge>>() => T;
  aggregate: <T = AggregateGameIndexPromise>() => T;
}

export interface GameIndexConnectionSubscription
  extends Promise<AsyncIterator<GameIndexConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameIndexEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameIndexSubscription>() => T;
}

export interface GameIndexEdge {
  node: GameIndex;
  cursor: String;
}

export interface GameIndexEdgePromise
  extends Promise<GameIndexEdge>,
    Fragmentable {
  node: <T = GameIndexPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameIndexEdgeSubscription
  extends Promise<AsyncIterator<GameIndexEdge>>,
    Fragmentable {
  node: <T = GameIndexSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGameIndex {
  count: Int;
}

export interface AggregateGameIndexPromise
  extends Promise<AggregateGameIndex>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameIndexSubscription
  extends Promise<AsyncIterator<AggregateGameIndex>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Item {
  name?: String;
  url?: String;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Move {
  name?: String;
  url?: String;
}

export interface MovePromise extends Promise<Move>, Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface MoveSubscription
  extends Promise<AsyncIterator<Move>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface MoveConnection {
  pageInfo: PageInfo;
  edges: MoveEdge[];
}

export interface MoveConnectionPromise
  extends Promise<MoveConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MoveEdge>>() => T;
  aggregate: <T = AggregateMovePromise>() => T;
}

export interface MoveConnectionSubscription
  extends Promise<AsyncIterator<MoveConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MoveEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMoveSubscription>() => T;
}

export interface MoveEdge {
  node: Move;
  cursor: String;
}

export interface MoveEdgePromise extends Promise<MoveEdge>, Fragmentable {
  node: <T = MovePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MoveEdgeSubscription
  extends Promise<AsyncIterator<MoveEdge>>,
    Fragmentable {
  node: <T = MoveSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMove {
  count: Int;
}

export interface AggregateMovePromise
  extends Promise<AggregateMove>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMoveSubscription
  extends Promise<AsyncIterator<AggregateMove>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Pokemon {
  base_experience?: Int;
  height?: Int;
  id: ID_Output;
  is_default?: Boolean;
  location_area_encounters?: String;
  name?: String;
  order?: Int;
  weight?: Int;
  url?: String;
}

export interface PokemonPromise extends Promise<Pokemon>, Fragmentable {
  abilities: <T = FragmentableArray<Ability>>(
    args?: {
      where?: AbilityWhereInput;
      orderBy?: AbilityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  base_experience: () => Promise<Int>;
  forms: <T = FragmentableArray<Form>>(
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  game_indices: <T = FragmentableArray<GameIndex>>(
    args?: {
      where?: GameIndexWhereInput;
      orderBy?: GameIndexOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  held_items: <T = FragmentableArray<Item>>(
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  height: () => Promise<Int>;
  id: () => Promise<ID_Output>;
  is_default: () => Promise<Boolean>;
  location_area_encounters: () => Promise<String>;
  moves: <T = FragmentableArray<Move>>(
    args?: {
      where?: MoveWhereInput;
      orderBy?: MoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  order: () => Promise<Int>;
  species: <T = FragmentableArray<Species>>(
    args?: {
      where?: SpeciesWhereInput;
      orderBy?: SpeciesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sprites: <T = FragmentableArray<Sprite>>(
    args?: {
      where?: SpriteWhereInput;
      orderBy?: SpriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  stats: <T = FragmentableArray<Stat>>(
    args?: {
      where?: StatWhereInput;
      orderBy?: StatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  types: <T = FragmentableArray<Type>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  weight: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface PokemonSubscription
  extends Promise<AsyncIterator<Pokemon>>,
    Fragmentable {
  abilities: <T = Promise<AsyncIterator<AbilitySubscription>>>(
    args?: {
      where?: AbilityWhereInput;
      orderBy?: AbilityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  base_experience: () => Promise<AsyncIterator<Int>>;
  forms: <T = Promise<AsyncIterator<FormSubscription>>>(
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  game_indices: <T = Promise<AsyncIterator<GameIndexSubscription>>>(
    args?: {
      where?: GameIndexWhereInput;
      orderBy?: GameIndexOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  held_items: <T = Promise<AsyncIterator<ItemSubscription>>>(
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  height: () => Promise<AsyncIterator<Int>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  is_default: () => Promise<AsyncIterator<Boolean>>;
  location_area_encounters: () => Promise<AsyncIterator<String>>;
  moves: <T = Promise<AsyncIterator<MoveSubscription>>>(
    args?: {
      where?: MoveWhereInput;
      orderBy?: MoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  species: <T = Promise<AsyncIterator<SpeciesSubscription>>>(
    args?: {
      where?: SpeciesWhereInput;
      orderBy?: SpeciesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sprites: <T = Promise<AsyncIterator<SpriteSubscription>>>(
    args?: {
      where?: SpriteWhereInput;
      orderBy?: SpriteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  stats: <T = Promise<AsyncIterator<StatSubscription>>>(
    args?: {
      where?: StatWhereInput;
      orderBy?: StatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  types: <T = Promise<AsyncIterator<TypeSubscription>>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  weight: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Species {
  name?: String;
  url?: String;
}

export interface SpeciesPromise extends Promise<Species>, Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface SpeciesSubscription
  extends Promise<AsyncIterator<Species>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Sprite {
  back_default?: String;
  back_female?: String;
  back_shiny?: String;
  back_shiny_female?: String;
  front_default?: String;
  front_female?: String;
  front_shiny?: String;
  front_shiny_female?: String;
}

export interface SpritePromise extends Promise<Sprite>, Fragmentable {
  back_default: () => Promise<String>;
  back_female: () => Promise<String>;
  back_shiny: () => Promise<String>;
  back_shiny_female: () => Promise<String>;
  front_default: () => Promise<String>;
  front_female: () => Promise<String>;
  front_shiny: () => Promise<String>;
  front_shiny_female: () => Promise<String>;
}

export interface SpriteSubscription
  extends Promise<AsyncIterator<Sprite>>,
    Fragmentable {
  back_default: () => Promise<AsyncIterator<String>>;
  back_female: () => Promise<AsyncIterator<String>>;
  back_shiny: () => Promise<AsyncIterator<String>>;
  back_shiny_female: () => Promise<AsyncIterator<String>>;
  front_default: () => Promise<AsyncIterator<String>>;
  front_female: () => Promise<AsyncIterator<String>>;
  front_shiny: () => Promise<AsyncIterator<String>>;
  front_shiny_female: () => Promise<AsyncIterator<String>>;
}

export interface Stat {
  base_stat?: Int;
  effort?: Int;
  name?: String;
  url?: String;
}

export interface StatPromise extends Promise<Stat>, Fragmentable {
  base_stat: () => Promise<Int>;
  effort: () => Promise<Int>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface StatSubscription
  extends Promise<AsyncIterator<Stat>>,
    Fragmentable {
  base_stat: () => Promise<AsyncIterator<Int>>;
  effort: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Type {
  slot?: Int;
  name?: String;
  url?: String;
}

export interface TypePromise extends Promise<Type>, Fragmentable {
  slot: () => Promise<Int>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface TypeSubscription
  extends Promise<AsyncIterator<Type>>,
    Fragmentable {
  slot: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PokemonConnection {
  pageInfo: PageInfo;
  edges: PokemonEdge[];
}

export interface PokemonConnectionPromise
  extends Promise<PokemonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PokemonEdge>>() => T;
  aggregate: <T = AggregatePokemonPromise>() => T;
}

export interface PokemonConnectionSubscription
  extends Promise<AsyncIterator<PokemonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PokemonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePokemonSubscription>() => T;
}

export interface PokemonEdge {
  node: Pokemon;
  cursor: String;
}

export interface PokemonEdgePromise extends Promise<PokemonEdge>, Fragmentable {
  node: <T = PokemonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PokemonEdgeSubscription
  extends Promise<AsyncIterator<PokemonEdge>>,
    Fragmentable {
  node: <T = PokemonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePokemon {
  count: Int;
}

export interface AggregatePokemonPromise
  extends Promise<AggregatePokemon>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePokemonSubscription
  extends Promise<AsyncIterator<AggregatePokemon>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpeciesConnection {
  pageInfo: PageInfo;
  edges: SpeciesEdge[];
}

export interface SpeciesConnectionPromise
  extends Promise<SpeciesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpeciesEdge>>() => T;
  aggregate: <T = AggregateSpeciesPromise>() => T;
}

export interface SpeciesConnectionSubscription
  extends Promise<AsyncIterator<SpeciesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpeciesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpeciesSubscription>() => T;
}

export interface SpeciesEdge {
  node: Species;
  cursor: String;
}

export interface SpeciesEdgePromise extends Promise<SpeciesEdge>, Fragmentable {
  node: <T = SpeciesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpeciesEdgeSubscription
  extends Promise<AsyncIterator<SpeciesEdge>>,
    Fragmentable {
  node: <T = SpeciesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSpecies {
  count: Int;
}

export interface AggregateSpeciesPromise
  extends Promise<AggregateSpecies>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpeciesSubscription
  extends Promise<AsyncIterator<AggregateSpecies>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpriteConnection {
  pageInfo: PageInfo;
  edges: SpriteEdge[];
}

export interface SpriteConnectionPromise
  extends Promise<SpriteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpriteEdge>>() => T;
  aggregate: <T = AggregateSpritePromise>() => T;
}

export interface SpriteConnectionSubscription
  extends Promise<AsyncIterator<SpriteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpriteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpriteSubscription>() => T;
}

export interface SpriteEdge {
  node: Sprite;
  cursor: String;
}

export interface SpriteEdgePromise extends Promise<SpriteEdge>, Fragmentable {
  node: <T = SpritePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpriteEdgeSubscription
  extends Promise<AsyncIterator<SpriteEdge>>,
    Fragmentable {
  node: <T = SpriteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSprite {
  count: Int;
}

export interface AggregateSpritePromise
  extends Promise<AggregateSprite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpriteSubscription
  extends Promise<AsyncIterator<AggregateSprite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StatConnection {
  pageInfo: PageInfo;
  edges: StatEdge[];
}

export interface StatConnectionPromise
  extends Promise<StatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StatEdge>>() => T;
  aggregate: <T = AggregateStatPromise>() => T;
}

export interface StatConnectionSubscription
  extends Promise<AsyncIterator<StatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStatSubscription>() => T;
}

export interface StatEdge {
  node: Stat;
  cursor: String;
}

export interface StatEdgePromise extends Promise<StatEdge>, Fragmentable {
  node: <T = StatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StatEdgeSubscription
  extends Promise<AsyncIterator<StatEdge>>,
    Fragmentable {
  node: <T = StatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStat {
  count: Int;
}

export interface AggregateStatPromise
  extends Promise<AggregateStat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStatSubscription
  extends Promise<AsyncIterator<AggregateStat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TypeConnection {
  pageInfo: PageInfo;
  edges: TypeEdge[];
}

export interface TypeConnectionPromise
  extends Promise<TypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TypeEdge>>() => T;
  aggregate: <T = AggregateTypePromise>() => T;
}

export interface TypeConnectionSubscription
  extends Promise<AsyncIterator<TypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTypeSubscription>() => T;
}

export interface TypeEdge {
  node: Type;
  cursor: String;
}

export interface TypeEdgePromise extends Promise<TypeEdge>, Fragmentable {
  node: <T = TypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TypeEdgeSubscription
  extends Promise<AsyncIterator<TypeEdge>>,
    Fragmentable {
  node: <T = TypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateType {
  count: Int;
}

export interface AggregateTypePromise
  extends Promise<AggregateType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTypeSubscription
  extends Promise<AsyncIterator<AggregateType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AbilitySubscriptionPayload {
  mutation: MutationType;
  node: Ability;
  updatedFields: String[];
  previousValues: AbilityPreviousValues;
}

export interface AbilitySubscriptionPayloadPromise
  extends Promise<AbilitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AbilityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AbilityPreviousValuesPromise>() => T;
}

export interface AbilitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AbilitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AbilitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AbilityPreviousValuesSubscription>() => T;
}

export interface AbilityPreviousValues {
  name?: String;
  url?: String;
}

export interface AbilityPreviousValuesPromise
  extends Promise<AbilityPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface AbilityPreviousValuesSubscription
  extends Promise<AsyncIterator<AbilityPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface FormSubscriptionPayload {
  mutation: MutationType;
  node: Form;
  updatedFields: String[];
  previousValues: FormPreviousValues;
}

export interface FormSubscriptionPayloadPromise
  extends Promise<FormSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FormPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FormPreviousValuesPromise>() => T;
}

export interface FormSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FormSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FormSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FormPreviousValuesSubscription>() => T;
}

export interface FormPreviousValues {
  name?: String;
  url?: String;
}

export interface FormPreviousValuesPromise
  extends Promise<FormPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FormPreviousValuesSubscription
  extends Promise<AsyncIterator<FormPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface GameIndexSubscriptionPayload {
  mutation: MutationType;
  node: GameIndex;
  updatedFields: String[];
  previousValues: GameIndexPreviousValues;
}

export interface GameIndexSubscriptionPayloadPromise
  extends Promise<GameIndexSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GameIndexPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GameIndexPreviousValuesPromise>() => T;
}

export interface GameIndexSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameIndexSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameIndexSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GameIndexPreviousValuesSubscription>() => T;
}

export interface GameIndexPreviousValues {
  name?: String;
  url?: String;
}

export interface GameIndexPreviousValuesPromise
  extends Promise<GameIndexPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface GameIndexPreviousValuesSubscription
  extends Promise<AsyncIterator<GameIndexPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  name?: String;
  url?: String;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface MoveSubscriptionPayload {
  mutation: MutationType;
  node: Move;
  updatedFields: String[];
  previousValues: MovePreviousValues;
}

export interface MoveSubscriptionPayloadPromise
  extends Promise<MoveSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MovePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MovePreviousValuesPromise>() => T;
}

export interface MoveSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MoveSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MoveSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MovePreviousValuesSubscription>() => T;
}

export interface MovePreviousValues {
  name?: String;
  url?: String;
}

export interface MovePreviousValuesPromise
  extends Promise<MovePreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface MovePreviousValuesSubscription
  extends Promise<AsyncIterator<MovePreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PokemonSubscriptionPayload {
  mutation: MutationType;
  node: Pokemon;
  updatedFields: String[];
  previousValues: PokemonPreviousValues;
}

export interface PokemonSubscriptionPayloadPromise
  extends Promise<PokemonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PokemonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PokemonPreviousValuesPromise>() => T;
}

export interface PokemonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PokemonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PokemonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PokemonPreviousValuesSubscription>() => T;
}

export interface PokemonPreviousValues {
  base_experience?: Int;
  height?: Int;
  id: ID_Output;
  is_default?: Boolean;
  location_area_encounters?: String;
  name?: String;
  order?: Int;
  weight?: Int;
  url?: String;
}

export interface PokemonPreviousValuesPromise
  extends Promise<PokemonPreviousValues>,
    Fragmentable {
  base_experience: () => Promise<Int>;
  height: () => Promise<Int>;
  id: () => Promise<ID_Output>;
  is_default: () => Promise<Boolean>;
  location_area_encounters: () => Promise<String>;
  name: () => Promise<String>;
  order: () => Promise<Int>;
  weight: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface PokemonPreviousValuesSubscription
  extends Promise<AsyncIterator<PokemonPreviousValues>>,
    Fragmentable {
  base_experience: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  is_default: () => Promise<AsyncIterator<Boolean>>;
  location_area_encounters: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface SpeciesSubscriptionPayload {
  mutation: MutationType;
  node: Species;
  updatedFields: String[];
  previousValues: SpeciesPreviousValues;
}

export interface SpeciesSubscriptionPayloadPromise
  extends Promise<SpeciesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpeciesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpeciesPreviousValuesPromise>() => T;
}

export interface SpeciesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpeciesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpeciesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpeciesPreviousValuesSubscription>() => T;
}

export interface SpeciesPreviousValues {
  name?: String;
  url?: String;
}

export interface SpeciesPreviousValuesPromise
  extends Promise<SpeciesPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface SpeciesPreviousValuesSubscription
  extends Promise<AsyncIterator<SpeciesPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface SpriteSubscriptionPayload {
  mutation: MutationType;
  node: Sprite;
  updatedFields: String[];
  previousValues: SpritePreviousValues;
}

export interface SpriteSubscriptionPayloadPromise
  extends Promise<SpriteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpritePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpritePreviousValuesPromise>() => T;
}

export interface SpriteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpriteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpriteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpritePreviousValuesSubscription>() => T;
}

export interface SpritePreviousValues {
  back_default?: String;
  back_female?: String;
  back_shiny?: String;
  back_shiny_female?: String;
  front_default?: String;
  front_female?: String;
  front_shiny?: String;
  front_shiny_female?: String;
}

export interface SpritePreviousValuesPromise
  extends Promise<SpritePreviousValues>,
    Fragmentable {
  back_default: () => Promise<String>;
  back_female: () => Promise<String>;
  back_shiny: () => Promise<String>;
  back_shiny_female: () => Promise<String>;
  front_default: () => Promise<String>;
  front_female: () => Promise<String>;
  front_shiny: () => Promise<String>;
  front_shiny_female: () => Promise<String>;
}

export interface SpritePreviousValuesSubscription
  extends Promise<AsyncIterator<SpritePreviousValues>>,
    Fragmentable {
  back_default: () => Promise<AsyncIterator<String>>;
  back_female: () => Promise<AsyncIterator<String>>;
  back_shiny: () => Promise<AsyncIterator<String>>;
  back_shiny_female: () => Promise<AsyncIterator<String>>;
  front_default: () => Promise<AsyncIterator<String>>;
  front_female: () => Promise<AsyncIterator<String>>;
  front_shiny: () => Promise<AsyncIterator<String>>;
  front_shiny_female: () => Promise<AsyncIterator<String>>;
}

export interface StatSubscriptionPayload {
  mutation: MutationType;
  node: Stat;
  updatedFields: String[];
  previousValues: StatPreviousValues;
}

export interface StatSubscriptionPayloadPromise
  extends Promise<StatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatPreviousValuesPromise>() => T;
}

export interface StatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatPreviousValuesSubscription>() => T;
}

export interface StatPreviousValues {
  base_stat?: Int;
  effort?: Int;
  name?: String;
  url?: String;
}

export interface StatPreviousValuesPromise
  extends Promise<StatPreviousValues>,
    Fragmentable {
  base_stat: () => Promise<Int>;
  effort: () => Promise<Int>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface StatPreviousValuesSubscription
  extends Promise<AsyncIterator<StatPreviousValues>>,
    Fragmentable {
  base_stat: () => Promise<AsyncIterator<Int>>;
  effort: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface TypeSubscriptionPayload {
  mutation: MutationType;
  node: Type;
  updatedFields: String[];
  previousValues: TypePreviousValues;
}

export interface TypeSubscriptionPayloadPromise
  extends Promise<TypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TypePreviousValuesPromise>() => T;
}

export interface TypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TypePreviousValuesSubscription>() => T;
}

export interface TypePreviousValues {
  slot?: Int;
  name?: String;
  url?: String;
}

export interface TypePreviousValuesPromise
  extends Promise<TypePreviousValues>,
    Fragmentable {
  slot: () => Promise<Int>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface TypePreviousValuesSubscription
  extends Promise<AsyncIterator<TypePreviousValues>>,
    Fragmentable {
  slot: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Pokemon",
    embedded: false
  },
  {
    name: "Ability",
    embedded: false
  },
  {
    name: "Form",
    embedded: false
  },
  {
    name: "GameIndex",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Move",
    embedded: false
  },
  {
    name: "Species",
    embedded: false
  },
  {
    name: "Sprite",
    embedded: false
  },
  {
    name: "Stat",
    embedded: false
  },
  {
    name: "Type",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
